"""update models

Revision ID: 7c98ac9d3eff
Revises: 18df0bf9fe60
Create Date: 2025-10-10 12:04:56.272238

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7c98ac9d3eff'
down_revision: Union[str, Sequence[str], None] = '18df0bf9fe60'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('assignments')
    op.drop_table('assignment_questions')
    op.drop_index(op.f('ix_docsuploads_filename'), table_name='docsuploads')
    op.drop_index(op.f('ix_docsuploads_id'), table_name='docsuploads')
    op.drop_table('docsuploads')
    op.drop_index(op.f('ix_student_insights_id'), table_name='student_insights')
    op.drop_table('student_insights')
    op.drop_table('submissions')
    op.drop_index(op.f('ix_interviewpreps_id'), table_name='interviewpreps')
    op.drop_index(op.f('ix_interviewpreps_name'), table_name='interviewpreps')
    op.drop_table('interviewpreps')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('interviewpreps',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_answers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('interviewpreps_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('interviewpreps_pkey'))
    )
    op.create_index(op.f('ix_interviewpreps_name'), 'interviewpreps', ['name'], unique=False)
    op.create_index(op.f('ix_interviewpreps_id'), 'interviewpreps', ['id'], unique=False)
    op.create_table('submissions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('assignment_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignments.id'], name=op.f('submissions_assignment_id_fkey')),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name=op.f('submissions_student_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('submissions_pkey'))
    )
    op.create_table('student_insights',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('salary_range', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('growth_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('demand_level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('top_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('market_outlook', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('key_trends', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('recommend_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('student_insights_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('student_insights_pkey'))
    )
    op.create_index(op.f('ix_student_insights_id'), 'student_insights', ['id'], unique=False)
    op.create_table('docsuploads',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_url_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['teacher_insights.id'], name=op.f('docsuploads_group_id_fkey')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('docsuploads_owner_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('docsuploads_pkey'))
    )
    op.create_index(op.f('ix_docsuploads_id'), 'docsuploads', ['id'], unique=False)
    op.create_index(op.f('ix_docsuploads_filename'), 'docsuploads', ['filename'], unique=False)
    op.create_table('assignment_questions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('assignment_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('answers', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignments.id'], name=op.f('assignment_questions_assignment_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('assignment_questions_pkey'))
    )
    op.create_table('assignments',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('assignments_owner_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('assignments_pkey'))
    )
    # ### end Alembic commands ###
